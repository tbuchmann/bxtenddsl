package de.ubt.ai1.m2m.bxtenddsl.framework;

import org.eclipse.xtend2.lib.StringConcatenation;

/**
 * Template for the abstract base class from which all other transformation rules inherit.
 */
@SuppressWarnings("all")
public final class BaseClassTemplate {
  /**
   * Returns Xtend source code for the abstract base rule class.
   */
  public static String getCode(final FrameworkConfig config) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _rootPackage = config.getRootPackage();
    _builder.append(_rootPackage);
    _builder.append(".rules");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import ");
    String _rootPackage_1 = config.getRootPackage();
    _builder.append(_rootPackage_1);
    _builder.append(".corrmodel.Corr");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _rootPackage_2 = config.getRootPackage();
    _builder.append(_rootPackage_2);
    _builder.append(".corrmodel.CorrElem");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _rootPackage_3 = config.getRootPackage();
    _builder.append(_rootPackage_3);
    _builder.append(".corrmodel.CorrModelFactory");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _rootPackage_4 = config.getRootPackage();
    _builder.append(_rootPackage_4);
    _builder.append(".corrmodel.MultiElem");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _rootPackage_5 = config.getRootPackage();
    _builder.append(_rootPackage_5);
    _builder.append(".corrmodel.SingleElem");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _rootPackage_6 = config.getRootPackage();
    _builder.append(_rootPackage_6);
    _builder.append(".corrmodel.Transformation");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _rootPackage_7 = config.getRootPackage();
    _builder.append(_rootPackage_7);
    _builder.append(".trafo.");
    String _trafo = config.getTrafo();
    _builder.append(_trafo);
    _builder.newLineIfNotEmpty();
    _builder.append("import java.util.ArrayList");
    _builder.newLine();
    _builder.append("import java.util.HashMap");
    _builder.newLine();
    _builder.append("import java.util.List");
    _builder.newLine();
    _builder.append("import java.util.Map");
    _builder.newLine();
    _builder.append("import java.util.Objects");
    _builder.newLine();
    _builder.append("import java.util.Set");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.Resource");
    _builder.newLine();
    _builder.append("import org.eclipse.xtend.lib.annotations.Data");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.xbase.lib.Functions.Function0");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.xbase.lib.Functions.Function1");
    _builder.newLine();
    _builder.newLine();
    _builder.append("abstract class Elem2Elem {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val public String ruleId");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val protected ");
    String _trafo_1 = config.getTrafo();
    _builder.append(_trafo_1, "\t");
    _builder.append(" trafo");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("val protected Resource sourceModel");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val protected Resource targetModel");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val protected Resource corrModel");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected List<EObject> createdElems");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected List<EObject> spareElems");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected Set<EObject> detachedCorrElems");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val static sourcePackage = ");
    String _sourcePackage = config.getSourcePackage();
    _builder.append(_sourcePackage, "\t");
    _builder.append("::eINSTANCE");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("val static targetPackage = ");
    String _targetPackage = config.getTargetPackage();
    _builder.append(_targetPackage, "\t");
    _builder.append("::eINSTANCE");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("val static sourceFactory = ");
    String _sourceFactory = config.getSourceFactory();
    _builder.append(_sourceFactory, "\t");
    _builder.append("::eINSTANCE");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("val static targetFactory = ");
    String _targetFactory = config.getTargetFactory();
    _builder.append(_targetFactory, "\t");
    _builder.append("::eINSTANCE");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("val static corrFactory = CorrModelFactory::eINSTANCE");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static Map<EObject, Corr> elementsToCorr = newHashMap()");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("new(String ruleId, ");
    String _trafo_2 = config.getTrafo();
    _builder.append(_trafo_2, "\t");
    _builder.append(" trafo) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.ruleId = ruleId");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.trafo = trafo");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sourceModel = trafo.source");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("targetModel = trafo.target");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("corrModel = trafo.corr;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(corrModel.contents.get(0) as Transformation).correspondences.forEach[c |");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("c.flatSrc.forEach[e | elementsToCorr.put(e, c)]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("c.flatTrg.forEach[e | elementsToCorr.put(e, c)]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Data static class CorrModelDelta {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<EObject> createdElems");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<EObject> spareElems");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Set<EObject> detachedCorrElems");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def abstract CorrModelDelta sourceToTarget(Set<EObject> _detachedCorrElems);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void onTrgElemCreation(EObject trgElem) {}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void onTrgElemDeletion(EObject trgElem) {}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def abstract CorrModelDelta targetToSource(Set<EObject> _detachedCorrElems);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void onSrcElemCreation(EObject srcElem) {}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void onSrcElemDeletion(EObject srcElem) {}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def protected boolean hasCorr(EObject obj) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return elementsToCorr.containsKey(obj)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def protected Corr getCorr(EObject obj) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val corr = elementsToCorr.get(obj)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (corr === null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new IllegalArgumentException(\"No correspondence was created for the given object!\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return corr");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def protected int getCorrElemPosition(EObject element) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val source = element.corr.source");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (var i = 0; i < source.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (source.get(i) instanceof SingleElem && (source.get(i) as SingleElem).element == element) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return i");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else if (source.get(i) instanceof MultiElem && (source.get(i) as MultiElem).elements.contains(element)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return i");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val target = element.corr.target");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (var i = 0; i < target.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (target.get(i) instanceof SingleElem && (target.get(i) as SingleElem).element == element) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return i");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else if (target.get(i) instanceof MultiElem && (target.get(i) as MultiElem).elements.contains(element)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return i");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw new AssertionError(\"Invalid mapping in elementsToCorr map!\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def protected SingleElem wrap(EObject obj) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val singleElem = corrFactory.createSingleElem() => [it.element = obj]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("corrModel.contents += singleElem");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return singleElem");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def protected static dispatch EObject unwrap(SingleElem elem) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return elem.element");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def protected MultiElem wrap(List<? extends EObject> objs) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val multiElem = corrFactory.createMultiElem() => [it.elements += objs]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("corrModel.contents += multiElem");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return multiElem");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def protected static dispatch List<? extends EObject> unwrap(MultiElem elem) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return elem.elements");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def protected static void assertRuleId(Corr corr, String... ruleIds) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (!ruleIds.contains(corr.ruleId)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new AssertionError(\"The given corr doesn\'t have any of the asserted rule ids!\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def protected Corr updateOrCreateCorrSrc(CorrElem elem, CorrElem... additionalElems) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return updateOrCreateCorr(elem, true, additionalElems)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def protected Corr updateOrCreateCorrTrg(CorrElem elem, CorrElem... additionalElems) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return updateOrCreateCorr(elem, false, additionalElems)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Data protected static class CorrElemType {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String clazz");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("boolean multivalued");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def protected List<CorrElem> getOrCreateSrc(Corr corr, CorrElemType... srcTypes) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (srcTypes.empty) throw new IllegalArgumentException(\"The source elements to create may not be empty!\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var List<CorrElem> source = corr.source");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (corr.flatSrc.empty) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (type : srcTypes) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("val corrElem = if (!type.multivalued) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("val eClass = sourcePackage.getEClassifier(type.clazz) as EClass");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("corrFactory.createSingleElem() => [it.element = sourceFactory.create(eClass)]");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("corrFactory.createMultiElem()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("source += corrElem");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("createdElems += corr.flatSrc");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("corr.flatSrc.forEach[e | elementsToCorr.put(e, corr)]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return source");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def protected List<CorrElem> getOrCreateTrg(Corr corr, CorrElemType... trgTypes) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (trgTypes.empty) throw new IllegalArgumentException(\"The target elements to create may not be empty!\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var List<CorrElem> target = corr.target");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (corr.flatTrg.empty) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (type : trgTypes) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("val corrElem = if (!type.multivalued) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("val eClass = targetPackage.getEClassifier(type.clazz) as EClass");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("corrFactory.createSingleElem() => [it.element = targetFactory.create(eClass)]");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("corrFactory.createMultiElem()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("target += corrElem");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("createdElems += corr.flatTrg");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("corr.flatTrg.forEach[e | elementsToCorr.put(e, corr)]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return target");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected static abstract class MultiElemUpdater<T extends EObject> {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<T> outdated");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<T> updated");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val Function0<T> elemFactory");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val Elem2Elem rule");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val Corr corr");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var boolean finished");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new(List<T> outdated, Function0<T> elemFactory, Elem2Elem rule, Corr corr) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.outdated = newArrayList() => [it += outdated]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.updated = newArrayList()");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.elemFactory = elemFactory");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.rule = rule");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.corr = corr");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.finished = false");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("def protected T update(Function1<? super T, Boolean> predicate) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (finished) throw new IllegalStateException(\"Finish was already called on this MultiElemUpdater!\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("val existing = outdated.findFirst[predicate.apply(it)]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (outdated.remove(existing)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("updated += existing");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return existing");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("val created = elemFactory.apply()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("rule.createdElems += created");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("elementsToCorr.put(created, corr)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("updated += created");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return created");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("def protected List<T> finish() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (finished) throw new IllegalStateException(\"Finish was already called on this MultiElemUpdater!\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("finished = true");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("rule.spareElems += outdated");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return updated");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected static class SrcMultiElemUpdater<T extends EObject> extends MultiElemUpdater<T> {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new(List<T> outdated, String elemClass, Elem2Elem rule, Corr corr) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("super(outdated, [sourceFactory.create(sourcePackage.getEClassifier(elemClass) as EClass) as T], rule, corr)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected static class TrgMultiElemUpdater<T extends EObject> extends MultiElemUpdater<T> {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new(List<T> outdated, String elemClass, Elem2Elem rule, Corr corr) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("super(outdated, [targetFactory.create(targetPackage.getEClassifier(elemClass) as EClass) as T], rule, corr)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def private Corr updateOrCreateCorr(CorrElem elem, boolean src, CorrElem... additionalElems) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Objects.requireNonNull(elem, \"The parameter \'elem\' must not be null!\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Objects.requireNonNull(additionalElems, \"The parameter \'additionalElems\' must not be null!\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (additionalElems.contains(null)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new IllegalArgumentException(\"The additional elements must not contain null!\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val elems = new ArrayList<CorrElem>() => [");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("it += elem");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("it += additionalElems");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val flatElems = elems.map[if (it instanceof SingleElem) #[element] else (it as MultiElem).elements].flatten()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (flatElems.exists[it === null]) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new IllegalArgumentException(\"A corr must not be created from a null element!\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var corrCount = new HashMap<Corr, Integer>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (e : flatElems) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("val corr = elementsToCorr.get(e)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (corr !== null && corrCount.containsKey(corr)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("corrCount.put(corr, corrCount.get(corr) + 1)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else if (corr !== null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("corrCount.put(corr, 1)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val corrs = corrCount.keySet.toList()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val corrsElems = if (src) corrs.map[source] else corrs.map[target]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val corrsFlatElems = if (src) corrs.map[flatSrc] else corrs.map[flatTrg]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val anyDetachedElem = flatElems.exists[detachedCorrElems.contains(it)]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val corr = if (corrs.size() == 0) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("corrFactory.createCorr()");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if (corrs.size() == 1 && corrs.head().ruleId == ruleId");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("&& corrsFlatElems.head().size() == corrCount.values.head() && !anyDetachedElem) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("corrsElems.head().clear()");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("corrs.head()");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (var i = 0; i < corrs.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (element : corrsFlatElems.get(i)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("elementsToCorr.remove(element)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("detachedCorrElems += element");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("corrsElems.get(i).clear()");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("corrFactory.createCorr()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("corr.ruleId = ruleId");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (src) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("corr.source += elems");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("corr.flatSrc.forEach[e | elementsToCorr.put(e, corr)]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("corr.target += elems");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("corr.flatTrg.forEach[e | elementsToCorr.put(e, corr)]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(corrModel.contents.get(0) as Transformation).correspondences += corr");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return corr");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  private BaseClassTemplate() {
  }
}
