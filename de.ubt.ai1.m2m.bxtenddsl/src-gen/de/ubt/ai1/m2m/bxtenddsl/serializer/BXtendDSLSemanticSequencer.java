/*
 * generated by Xtext 2.16.0
 */
package de.ubt.ai1.m2m.bxtenddsl.serializer;

import com.google.inject.Inject;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.BXtendDSL;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.BXtendDSLPackage;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.ClassMatcherModifier;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.Config;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.Correspondence;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.CustomizedGetter;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.CustomizedSetter;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.FeatureMapping;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.Metamodels;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.SrcClassMatcher;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.SrcMappingFeature;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.TransformationRule;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.TrgClassMatcher;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.TrgMappingFeature;
import de.ubt.ai1.m2m.bxtenddsl.services.BXtendDSLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BXtendDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BXtendDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BXtendDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BXtendDSLPackage.BXTEND_DSL:
				sequence_BXtendDSL(context, (BXtendDSL) semanticObject); 
				return; 
			case BXtendDSLPackage.CLASS_MATCHER_MODIFIER:
				sequence_ClassMatcherModifier(context, (ClassMatcherModifier) semanticObject); 
				return; 
			case BXtendDSLPackage.CONFIG:
				sequence_Config(context, (Config) semanticObject); 
				return; 
			case BXtendDSLPackage.CORRESPONDENCE:
				sequence_Correspondence(context, (Correspondence) semanticObject); 
				return; 
			case BXtendDSLPackage.CUSTOMIZED_GETTER:
				sequence_CustomizedGetter(context, (CustomizedGetter) semanticObject); 
				return; 
			case BXtendDSLPackage.CUSTOMIZED_SETTER:
				sequence_CustomizedSetter(context, (CustomizedSetter) semanticObject); 
				return; 
			case BXtendDSLPackage.FEATURE_MAPPING:
				sequence_FeatureMapping(context, (FeatureMapping) semanticObject); 
				return; 
			case BXtendDSLPackage.METAMODELS:
				sequence_Metamodels(context, (Metamodels) semanticObject); 
				return; 
			case BXtendDSLPackage.SRC_CLASS_MATCHER:
				sequence_SrcClassMatcher(context, (SrcClassMatcher) semanticObject); 
				return; 
			case BXtendDSLPackage.SRC_MAPPING_FEATURE:
				sequence_SrcMappingFeature(context, (SrcMappingFeature) semanticObject); 
				return; 
			case BXtendDSLPackage.TRANSFORMATION_RULE:
				sequence_TransformationRule(context, (TransformationRule) semanticObject); 
				return; 
			case BXtendDSLPackage.TRG_CLASS_MATCHER:
				sequence_TrgClassMatcher(context, (TrgClassMatcher) semanticObject); 
				return; 
			case BXtendDSLPackage.TRG_MAPPING_FEATURE:
				sequence_TrgMappingFeature(context, (TrgMappingFeature) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BXtendDSL returns BXtendDSL
	 *
	 * Constraint:
	 *     (metamodels=Metamodels config=Config rules+=TransformationRule*)
	 */
	protected void sequence_BXtendDSL(ISerializationContext context, BXtendDSL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ClassMatcherModifier returns ClassMatcherModifier
	 *
	 * Constraint:
	 *     (
	 *         ((filter?='filter' | sort?='sort' | creation?='creation' | deletion?='deletion')* group?='group') | 
	 *         ((group?='group' | sort?='sort' | creation?='creation' | deletion?='deletion')* filter?='filter') | 
	 *         ((group?='group' | filter?='filter' | creation?='creation' | deletion?='deletion')* sort?='sort') | 
	 *         ((group?='group' | filter?='filter' | sort?='sort' | deletion?='deletion')* creation?='creation') | 
	 *         ((group?='group' | filter?='filter' | sort?='sort' | creation?='creation')* deletion?='deletion')
	 *     )?
	 */
	protected void sequence_ClassMatcherModifier(ISerializationContext context, ClassMatcherModifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Config returns Config
	 *
	 * Constraint:
	 *     options+=ID*
	 */
	protected void sequence_Config(ISerializationContext context, Config semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Correspondence returns Correspondence
	 *
	 * Constraint:
	 *     (rule=[TransformationRule|ID] (matchers+=[ClassMatcher|ID] matchers+=[ClassMatcher|ID]*)?)
	 */
	protected void sequence_Correspondence(ISerializationContext context, Correspondence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CustomizedElement returns CustomizedGetter
	 *     CustomizedGetter returns CustomizedGetter
	 *
	 * Constraint:
	 *     (element=[EStructuralFeature|FeatureAccess] customId=ID)
	 */
	protected void sequence_CustomizedGetter(ISerializationContext context, CustomizedGetter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXtendDSLPackage.Literals.CUSTOMIZED_ELEMENT__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXtendDSLPackage.Literals.CUSTOMIZED_ELEMENT__ELEMENT));
			if (transientValues.isValueTransient(semanticObject, BXtendDSLPackage.Literals.CUSTOMIZED_ELEMENT__CUSTOM_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXtendDSLPackage.Literals.CUSTOMIZED_ELEMENT__CUSTOM_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCustomizedGetterAccess().getElementEStructuralFeatureFeatureAccessParserRuleCall_1_0_1(), semanticObject.eGet(BXtendDSLPackage.Literals.CUSTOMIZED_ELEMENT__ELEMENT, false));
		feeder.accept(grammarAccess.getCustomizedGetterAccess().getCustomIdIDTerminalRuleCall_3_0(), semanticObject.getCustomId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CustomizedElement returns CustomizedSetter
	 *     CustomizedSetter returns CustomizedSetter
	 *
	 * Constraint:
	 *     (element=[EStructuralFeature|FeatureAccess] customId=ID)
	 */
	protected void sequence_CustomizedSetter(ISerializationContext context, CustomizedSetter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXtendDSLPackage.Literals.CUSTOMIZED_ELEMENT__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXtendDSLPackage.Literals.CUSTOMIZED_ELEMENT__ELEMENT));
			if (transientValues.isValueTransient(semanticObject, BXtendDSLPackage.Literals.CUSTOMIZED_ELEMENT__CUSTOM_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXtendDSLPackage.Literals.CUSTOMIZED_ELEMENT__CUSTOM_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCustomizedSetterAccess().getElementEStructuralFeatureFeatureAccessParserRuleCall_1_0_1(), semanticObject.eGet(BXtendDSLPackage.Literals.CUSTOMIZED_ELEMENT__ELEMENT, false));
		feeder.accept(grammarAccess.getCustomizedSetterAccess().getCustomIdIDTerminalRuleCall_3_0(), semanticObject.getCustomId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FeatureMapping returns FeatureMapping
	 *
	 * Constraint:
	 *     (
	 *         (srcFeatures+=SrcMappingFeature | srcClasses+=[ClassMatcher|ID])+ 
	 *         direction=Direction 
	 *         (trgFeatures+=TrgMappingFeature | trgClasses+=[ClassMatcher|ID])+
	 *     )
	 */
	protected void sequence_FeatureMapping(ISerializationContext context, FeatureMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Metamodels returns Metamodels
	 *
	 * Constraint:
	 *     (sourcemodel=STRING customizedSrcElements+=CustomizedElement* targetmodel=STRING customizedTrgElements+=CustomizedElement*)
	 */
	protected void sequence_Metamodels(ISerializationContext context, Metamodels semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ClassMatcher returns SrcClassMatcher
	 *     SrcClassMatcher returns SrcClassMatcher
	 *
	 * Constraint:
	 *     (clazz=[EClass|ID] name=ID modifier=ClassMatcherModifier)
	 */
	protected void sequence_SrcClassMatcher(ISerializationContext context, SrcClassMatcher semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXtendDSLPackage.Literals.CLASS_MATCHER__CLAZZ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXtendDSLPackage.Literals.CLASS_MATCHER__CLAZZ));
			if (transientValues.isValueTransient(semanticObject, BXtendDSLPackage.Literals.CLASS_MATCHER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXtendDSLPackage.Literals.CLASS_MATCHER__NAME));
			if (transientValues.isValueTransient(semanticObject, BXtendDSLPackage.Literals.CLASS_MATCHER__MODIFIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXtendDSLPackage.Literals.CLASS_MATCHER__MODIFIER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSrcClassMatcherAccess().getClazzEClassIDTerminalRuleCall_0_0_1(), semanticObject.eGet(BXtendDSLPackage.Literals.CLASS_MATCHER__CLAZZ, false));
		feeder.accept(grammarAccess.getSrcClassMatcherAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSrcClassMatcherAccess().getModifierClassMatcherModifierParserRuleCall_2_0(), semanticObject.getModifier());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MappingFeature returns SrcMappingFeature
	 *     SrcMappingFeature returns SrcMappingFeature
	 *
	 * Constraint:
	 *     (
	 *         feature=[EStructuralFeature|FeatureAccess] | 
	 *         (corr?='{' feature=[EStructuralFeature|FeatureAccess] corrs+=Correspondence corrs+=Correspondence*)
	 *     )
	 */
	protected void sequence_SrcMappingFeature(ISerializationContext context, SrcMappingFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransformationRule returns TransformationRule
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         srcMatcher+=SrcClassMatcher 
	 *         srcMatcher+=SrcClassMatcher* 
	 *         trgMatcher+=TrgClassMatcher 
	 *         trgMatcher+=TrgClassMatcher* 
	 *         mappings+=FeatureMapping*
	 *     )
	 */
	protected void sequence_TransformationRule(ISerializationContext context, TransformationRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ClassMatcher returns TrgClassMatcher
	 *     TrgClassMatcher returns TrgClassMatcher
	 *
	 * Constraint:
	 *     (clazz=[EClass|ID] name=ID modifier=ClassMatcherModifier)
	 */
	protected void sequence_TrgClassMatcher(ISerializationContext context, TrgClassMatcher semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXtendDSLPackage.Literals.CLASS_MATCHER__CLAZZ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXtendDSLPackage.Literals.CLASS_MATCHER__CLAZZ));
			if (transientValues.isValueTransient(semanticObject, BXtendDSLPackage.Literals.CLASS_MATCHER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXtendDSLPackage.Literals.CLASS_MATCHER__NAME));
			if (transientValues.isValueTransient(semanticObject, BXtendDSLPackage.Literals.CLASS_MATCHER__MODIFIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXtendDSLPackage.Literals.CLASS_MATCHER__MODIFIER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrgClassMatcherAccess().getClazzEClassIDTerminalRuleCall_0_0_1(), semanticObject.eGet(BXtendDSLPackage.Literals.CLASS_MATCHER__CLAZZ, false));
		feeder.accept(grammarAccess.getTrgClassMatcherAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTrgClassMatcherAccess().getModifierClassMatcherModifierParserRuleCall_2_0(), semanticObject.getModifier());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MappingFeature returns TrgMappingFeature
	 *     TrgMappingFeature returns TrgMappingFeature
	 *
	 * Constraint:
	 *     (
	 *         feature=[EStructuralFeature|FeatureAccess] | 
	 *         (corr?='{' feature=[EStructuralFeature|FeatureAccess] corrs+=Correspondence corrs+=Correspondence*)
	 *     )
	 */
	protected void sequence_TrgMappingFeature(ISerializationContext context, TrgMappingFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
