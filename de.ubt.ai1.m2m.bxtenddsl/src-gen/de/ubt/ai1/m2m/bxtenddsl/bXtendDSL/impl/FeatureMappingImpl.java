/**
 * generated by Xtext 2.16.0
 */
package de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.impl;

import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.BXtendDSLPackage;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.ClassMatcher;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.Direction;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.FeatureMapping;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.SrcMappingFeature;
import de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.TrgMappingFeature;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Feature Mapping</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.impl.FeatureMappingImpl#getSrcFeatures <em>Src Features</em>}</li>
 *   <li>{@link de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.impl.FeatureMappingImpl#getSrcClasses <em>Src Classes</em>}</li>
 *   <li>{@link de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.impl.FeatureMappingImpl#getDirection <em>Direction</em>}</li>
 *   <li>{@link de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.impl.FeatureMappingImpl#getTrgFeatures <em>Trg Features</em>}</li>
 *   <li>{@link de.ubt.ai1.m2m.bxtenddsl.bXtendDSL.impl.FeatureMappingImpl#getTrgClasses <em>Trg Classes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FeatureMappingImpl extends MinimalEObjectImpl.Container implements FeatureMapping
{
  /**
   * The cached value of the '{@link #getSrcFeatures() <em>Src Features</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSrcFeatures()
   * @generated
   * @ordered
   */
  protected EList<SrcMappingFeature> srcFeatures;

  /**
   * The cached value of the '{@link #getSrcClasses() <em>Src Classes</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSrcClasses()
   * @generated
   * @ordered
   */
  protected EList<ClassMatcher> srcClasses;

  /**
   * The default value of the '{@link #getDirection() <em>Direction</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDirection()
   * @generated
   * @ordered
   */
  protected static final Direction DIRECTION_EDEFAULT = Direction.FWD;

  /**
   * The cached value of the '{@link #getDirection() <em>Direction</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDirection()
   * @generated
   * @ordered
   */
  protected Direction direction = DIRECTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getTrgFeatures() <em>Trg Features</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrgFeatures()
   * @generated
   * @ordered
   */
  protected EList<TrgMappingFeature> trgFeatures;

  /**
   * The cached value of the '{@link #getTrgClasses() <em>Trg Classes</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrgClasses()
   * @generated
   * @ordered
   */
  protected EList<ClassMatcher> trgClasses;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FeatureMappingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BXtendDSLPackage.Literals.FEATURE_MAPPING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SrcMappingFeature> getSrcFeatures()
  {
    if (srcFeatures == null)
    {
      srcFeatures = new EObjectContainmentEList<SrcMappingFeature>(SrcMappingFeature.class, this, BXtendDSLPackage.FEATURE_MAPPING__SRC_FEATURES);
    }
    return srcFeatures;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ClassMatcher> getSrcClasses()
  {
    if (srcClasses == null)
    {
      srcClasses = new EObjectResolvingEList<ClassMatcher>(ClassMatcher.class, this, BXtendDSLPackage.FEATURE_MAPPING__SRC_CLASSES);
    }
    return srcClasses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Direction getDirection()
  {
    return direction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDirection(Direction newDirection)
  {
    Direction oldDirection = direction;
    direction = newDirection == null ? DIRECTION_EDEFAULT : newDirection;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BXtendDSLPackage.FEATURE_MAPPING__DIRECTION, oldDirection, direction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TrgMappingFeature> getTrgFeatures()
  {
    if (trgFeatures == null)
    {
      trgFeatures = new EObjectContainmentEList<TrgMappingFeature>(TrgMappingFeature.class, this, BXtendDSLPackage.FEATURE_MAPPING__TRG_FEATURES);
    }
    return trgFeatures;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ClassMatcher> getTrgClasses()
  {
    if (trgClasses == null)
    {
      trgClasses = new EObjectResolvingEList<ClassMatcher>(ClassMatcher.class, this, BXtendDSLPackage.FEATURE_MAPPING__TRG_CLASSES);
    }
    return trgClasses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BXtendDSLPackage.FEATURE_MAPPING__SRC_FEATURES:
        return ((InternalEList<?>)getSrcFeatures()).basicRemove(otherEnd, msgs);
      case BXtendDSLPackage.FEATURE_MAPPING__TRG_FEATURES:
        return ((InternalEList<?>)getTrgFeatures()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BXtendDSLPackage.FEATURE_MAPPING__SRC_FEATURES:
        return getSrcFeatures();
      case BXtendDSLPackage.FEATURE_MAPPING__SRC_CLASSES:
        return getSrcClasses();
      case BXtendDSLPackage.FEATURE_MAPPING__DIRECTION:
        return getDirection();
      case BXtendDSLPackage.FEATURE_MAPPING__TRG_FEATURES:
        return getTrgFeatures();
      case BXtendDSLPackage.FEATURE_MAPPING__TRG_CLASSES:
        return getTrgClasses();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BXtendDSLPackage.FEATURE_MAPPING__SRC_FEATURES:
        getSrcFeatures().clear();
        getSrcFeatures().addAll((Collection<? extends SrcMappingFeature>)newValue);
        return;
      case BXtendDSLPackage.FEATURE_MAPPING__SRC_CLASSES:
        getSrcClasses().clear();
        getSrcClasses().addAll((Collection<? extends ClassMatcher>)newValue);
        return;
      case BXtendDSLPackage.FEATURE_MAPPING__DIRECTION:
        setDirection((Direction)newValue);
        return;
      case BXtendDSLPackage.FEATURE_MAPPING__TRG_FEATURES:
        getTrgFeatures().clear();
        getTrgFeatures().addAll((Collection<? extends TrgMappingFeature>)newValue);
        return;
      case BXtendDSLPackage.FEATURE_MAPPING__TRG_CLASSES:
        getTrgClasses().clear();
        getTrgClasses().addAll((Collection<? extends ClassMatcher>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BXtendDSLPackage.FEATURE_MAPPING__SRC_FEATURES:
        getSrcFeatures().clear();
        return;
      case BXtendDSLPackage.FEATURE_MAPPING__SRC_CLASSES:
        getSrcClasses().clear();
        return;
      case BXtendDSLPackage.FEATURE_MAPPING__DIRECTION:
        setDirection(DIRECTION_EDEFAULT);
        return;
      case BXtendDSLPackage.FEATURE_MAPPING__TRG_FEATURES:
        getTrgFeatures().clear();
        return;
      case BXtendDSLPackage.FEATURE_MAPPING__TRG_CLASSES:
        getTrgClasses().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BXtendDSLPackage.FEATURE_MAPPING__SRC_FEATURES:
        return srcFeatures != null && !srcFeatures.isEmpty();
      case BXtendDSLPackage.FEATURE_MAPPING__SRC_CLASSES:
        return srcClasses != null && !srcClasses.isEmpty();
      case BXtendDSLPackage.FEATURE_MAPPING__DIRECTION:
        return direction != DIRECTION_EDEFAULT;
      case BXtendDSLPackage.FEATURE_MAPPING__TRG_FEATURES:
        return trgFeatures != null && !trgFeatures.isEmpty();
      case BXtendDSLPackage.FEATURE_MAPPING__TRG_CLASSES:
        return trgClasses != null && !trgClasses.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (direction: ");
    result.append(direction);
    result.append(')');
    return result.toString();
  }

} //FeatureMappingImpl
